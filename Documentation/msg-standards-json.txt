Message Events Specification:

All messages operate on the following namespaces:
LobbyID:	(unique lobby ID variable) for messages emitted to ALL lobby participants
			example: "003484" for a 6 digit lobby ID
Socket ID: 	(unique socket ID variable made by the socket connection, 
			automatically joined on connection) for messages emitted to single user
			example: socket.Id() (returns a string of socket ID)
			All messages from the user to the server should also be emitted on this namespace
			

AnonUsers:

direction: Mobile User to Golang Server
event: "joinlobby"
data: {
	nickname: string
	lobbyid: int
}
server action: should trigger a response emit from the golang server to confirm if successful
		by checking if the username already is in use within the lobby
		If successful should add the socket to the lobby namespace.

direction: Mobile User to Golang Server
event: "setready"
data: {
	nickname: string
	ready: bool
}
server action: set ready bool for anonuser, and emit updatelobby to all

direction: Mobile User to Golang Server
event: "leavelobby"
data: none
server action: lookup anonuser in map and remove from session, emit updatelobby

direction: Mobile User to Golang Server
event: "msgserver"
data: {
	player: int //assigned anonuser player number
	msg: JSON{} //generic JSON data
}
server action: forward onto game server for game processing

HostUsers:

//Create association between this websocket connection and HostUser instance
direction: Desktop User to Golang Server
event: "hostlobby"
data: {
	hostid: int //User's unique ID
}

direction: Desktop User to Golang Server
event: "start"
data: none
server action: forward to game server, server should emit a response to all users


direction: Desktop User to Golang Server
event: "kick"
data: {
	nickname: string //username of anonuser to be kicked
	reason: string //optional
}
server action: 	update lobby user data structure, emit updated lobby to all, 
				emit kick message to kicked user
		
direction: Desktop User to Golang Server
event: "end"
data: {
	none
}
server action: forward to game server, call lobby end functions, emit response to all?

direction: Desktop User to Golang Server
event: "msgserver"
data: {
	msg: interface{} //generic JSON data - JSON Object
}
server action: forward to game server for game processing


Game Server:

//Check if game server accepts a new lobby connection/is up or returns a status/error
direction: Golang Server to Desktop User
event: "lobbyconnected"
data: {
	lobbyid: int
	feedback: error
}
front-end action: load up lobby and join lobby namespace (lobby id) to listen for new events

direction: Golang Server to All Users
event: "gamestart"
data: {
	response: bool
	feedback: error
}
front-end action: begin loading into game

direction: Golang Server to All Users
event: "gameend"
data: {
	response: bool
	feedback: error
}
front-end action: stop emitting messages to server? (leave lobby )

direction: Golang Server to Single (Desktop OR Mobile) User
event: "msgplayer"
data: {
	msg: JSON{} //game specific JSON data
}
front-end action: process game specific JSON data (msg variable)

direction: Golang Server to All Users
event: "msgall"
data: {
	msg: JSON{} //game specific JSON data
}
front-end action: process game specific JSON data (msg variable)

direction: Golang Server to All Users
event: "updatelobby"
data: {
	players: []JSON //Array of JSON objects (users)
}
front-end action: update the list of players in the lobby and ready status, etc

direction: Golang Server to Single (Mobile) User
event: "kick"
data: {
	reason: string //optional
}
front-end action: display kicked message to user and disconnect them from lobby?

*** GAME SERVER TO GOLANG SERVER ***

All messages are sent over TCP in JSON encoded bytes in the following format:
(A JSON object containing a JSON object)

TO A SINGLE USER:
{
	player: int
	msg: {}(JSON Object)
}

TO ALL USERS:
{
	msg: {}(JSON Object)
}

RECEIVED FROM USERS:
{
	player: int
	msg: {}(JSON Object)
}